syntax = "proto3";

package gpu.rentaler;

option java_package = "com.gpu.rentaler.grpc";
option java_outer_classname = "TaskAssignServiceProto";

import "google/protobuf/empty.proto";

// ================================
// 响应对象：上传完成并启动容器
// ================================
message UpDockerImageChunkResp {
    string containerName = 1; // 启动的容器名称
    string containerId = 2;   // 启动的容器ID
}


// ================================
// 请求对象：停止 Docker 容器
// ================================
message StopDockerContainerRequest {
    string containerId = 1;   // 目标容器ID
}

// ================================
// 请求对象：上传 Docker 镜像
// ================================
// ================================
// 请求对象：上传 Docker 镜像分片
// ================================
message UpDockerImageChunkRequest {
    bytes chunkData = 1;               // 镜像数据分片
    int32 deviceIndex = 2;             // 对应 GPU 设备索引
    bool isLastChunk = 3;              // 是否是最后一片
}

// ================================
// 请求对象：获取日志
// ================================
message GetLogRequest {
    string containerId = 1; // 目标容器ID
    int32 num = 2;          // 获取最新日志行数
}

// ================================
// 响应对象：日志内容
// ================================
message GetLogResp {
    string logContent = 1; // 日志内容
}

// ================================
// 请求对象：导出容器数据
// ================================
message ExportContainerDataRequest {
    string containerId = 1; // 目标容器ID
    string exportDir = 2;   // 容器内部要导出的目录
}

// ================================
// 响应对象：导出容器数据结果
// ================================
message ExportContainerDataResp {
    bytes zipFile = 1;       // 导出的压缩包内容
    string fileName = 2;     // 压缩包文件名
}

// ================================
// 请求对象：删除容器
// ================================
message DeleteContainerRequest {
    string containerId = 1; // 目标容器ID
}

// ================================
// 请求对象：删除镜像
// ================================
message DeleteImageRequest {
    string imageId = 1; // 目标镜像ID
}


// ================================
// 服务定义
// ================================
service TaskAssignService {
    // 停止指定 Docker 容器
    rpc StopDockerContainer(StopDockerContainerRequest) returns (google.protobuf.Empty);

    // 上传 Docker 镜像分片并启动容器（客户端流）
    rpc UpDockerImageStream(stream UpDockerImageChunkRequest) returns (UpDockerImageChunkResp);

    // 获取容器最新日志
    rpc GetLog(GetLogRequest) returns (GetLogResp);

    // 导出容器指定目录为压缩包
    rpc ExportContainerData(ExportContainerDataRequest) returns (ExportContainerDataResp);

    // 删除指定 Docker 容器
    rpc DeleteContainer(DeleteContainerRequest) returns (google.protobuf.Empty);

    // 删除指定 Docker 镜像
    rpc DeleteImage(DeleteImageRequest) returns (google.protobuf.Empty);
}
